
// Sprites
@mixin sprite-img($src) {
	background: url($src) no-repeat;
}
@mixin sprite-pos($position) {
	background-position: $position;
}

@mixin border-box{
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	-ms-box-sizing: border-box;
	box-sizing: border-box;
}


//	Background image - no repeat, centered, cover
@mixin OptimiseBgImg() {
	background-repeat: no-repeat;
	background-position: center center;
	background-size: cover;
}

//	Text drop shadow
@mixin TextDropShadow() {
	text-shadow: 0px 1px 21px rgba(0, 0, 0, 0.55);
	-webkit-text-shadow: 0px 1px 21px rgba(0, 0, 0, 0.55);
	-moz-text-shadow: 0px 1px 21px rgba(0, 0, 0, 0.55);
}


//	Center item horizontally and vertically
// 	make parent item position relative
@mixin CenterPositioning() {
	position: absolute;
	right: 0;
	top: 0;
	bottom: 0;
	left: 0;
	margin: auto;
}


/**
 * Ease between states
 * Use this to smooth hover/active/focus events
 **/
@mixin easeanimate(){
		-webkit-transition: all 0.2s ease-in-out;
			 -moz-transition: all 0.2s ease-in-out;
				 -o-transition: all 0.2s ease-in-out;
						transition: all 0.2s ease-in-out;
}


// Responsive breakpoints

@mixin device($media) {

	@if $media == phone-pt {
		@media only screen and (max-width: 400px) { @content; }
	}

	@else if $media == phone-ls {
		@media only screen and (max-width: 680px) { @content; }
	}

	@else if $media == tablet-pt {
		@media only screen and (max-width: 770px) { @content; }
	}

	@else if $media == tablet-ls {
		@media only screen and (max-width: 1024px) { @content; }
	}

	@else if $media == laptop {
		@media only screen and (max-width: 1390px) { @content; }
	}

	@else if $media == desktop {
		@media only screen and (max-width: 1750px) { @content; }
	}
}


// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff woff2 ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}
